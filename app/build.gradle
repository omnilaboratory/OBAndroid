apply plugin: 'com.android.application'
// butterKnife必须（哪里使用放哪里）
apply plugin: 'com.jakewharton.butterknife'
// Needed for gRPC
apply plugin: 'com.google.protobuf'

android {
    def versions = rootProject.ext.versions
    compileSdkVersion versions.compileVersion
    buildToolsVersion versions.buildToolVersion
//    ndkVersion "20.0.5594570"
    defaultConfig {
        multiDexEnabled = true
        applicationId versions.applicationId
        minSdkVersion versions.minSdkVersion
        targetSdkVersion versions.targetSdkVersion
        versionCode versions.versionCode
        versionName versions.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        // 阿里巴巴ARouter
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }
    }

    // 防止打包过程中出现OOM
    dexOptions {
        // 该属性已经被弃用  去掉
        // incremental true
        javaMaxHeapSize "4g"
    }
    // 设置签名文件
    signingConfigs {
        release {
            storeFile file('OBAndroid.jks')
            storePassword "111111"
            keyAlias "OBAndroid"
            keyPassword "111111"
        }
    }

    //在此添加：
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    buildTypes {
        release {
            // 定义代码混淆文件 注意：proguard-rules.pro要放在主工程的目录下
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // 是否混淆代码
            minifyEnabled false
            //是否zip对齐
            zipAlignEnabled true
            // 缩减resource文件
            shrinkResources false
            // 设置打包后应用名称
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    if (outputFileName.endsWith('.apk')) {
                        if ("debug".equalsIgnoreCase(variant.buildType.name)) {
                            outputFileName = "OBAndroid_testnet_${defaultConfig.versionName}_beta.10_test.apk"
                        } else if ("release".equalsIgnoreCase(variant.buildType.name)) {
                            outputFileName = "OBAndroid_testnet_${defaultConfig.versionName}_beta.10_release.apk"
                        }
                    }
                }
            }
            signingConfig signingConfigs.release
        }
        debug {
            // 定义代码混淆文件 注意：proguard-rules.pro要放在主工程的目录下
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // 是否混淆代码
            minifyEnabled false
            // 设置打包后应用名称
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    if (outputFileName.endsWith('.apk')) {
                        if ("debug".equalsIgnoreCase(variant.buildType.name)) {
                            outputFileName = "OBAndroid_testnet_${defaultConfig.versionName}_beta.10_test.apk"
                        } else if ("release".equalsIgnoreCase(variant.buildType.name)) {
                            outputFileName = "OBAndroid_testnet_${defaultConfig.versionName}_beta.10_release.apk"
                        }
                    }
                }
            }
            signingConfig signingConfigs.release
        }
    }
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/*'
        exclude 'META-INF/NOTICE' // will not include NOTICE file
        exclude 'META-INF/LICENSE' // will not include LICENSE file
        exclude 'META-INF/INDEX.LIST' // will not include INDEX.LIST file
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        doNotStrip '**/*.so'
    }
}

//打包时，APK文件名使用的获取时间的方法
def static getTime() {
    return new Date().format("yyMMdd", TimeZone.getDefault())
}

//  Needed for gRPC
sourceSets {
    main.java.srcDirs += "${protobuf.generatedFilesBaseDir}/main/javalite"
}

//  Needed for gRPC
protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.13.0"
    }
    plugins {
        javalite { artifact = "com.google.protobuf:protoc-gen-javalite:3.0.0" }
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.42.1'
        }
    }

    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option 'lite'
                }
            }
            task.plugins {
                grpc {
                    // This will generate the ServiceGrpc
                    // Options added to --grpc_out
                    option 'lite'
                }
            }
        }
    }
}

dependencies {
    def dependencies = rootProject.ext.deps
    implementation fileTree(include: ['*.jar','*.aar'], dir: 'libs')
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation dependencies.junit
    androidTestImplementation dependencies.test
    androidTestImplementation(dependencies.testEspresso) {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    implementation project(':baselibrary')
    implementation project(':framelibrary')
    implementation project(':thirdsupport')
    implementation project(':MPChartLib')
    // ARouter
    annotationProcessor dependencies.ArouterAnnotation
    // butterKnife
    compile dependencies.butterKnife
    // butterKnife注解处理器
    annotationProcessor dependencies.butterKnifeAnnotation
    // 分包
    compile dependencies.multidex
    // gRPC implementation to communicate with lnd
    implementation 'io.grpc:grpc-netty:1.42.1'
    implementation 'io.grpc:grpc-okhttp:1.42.1'
    implementation 'io.grpc:grpc-protobuf-lite:1.42.1'
    implementation 'io.grpc:grpc-stub:1.42.1'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'com.google.code.gson:gson:2.8.7'
    compileOnly 'com.google.api.grpc:googleapis-common-protos:0.0.3'
    implementation 'org.conscrypt:conscrypt-android:2.5.2'
    // Asynchronous programming library
    implementation "io.reactivex.rxjava3:rxandroid:3.0.0"
    implementation 'com.mindorks.android:prdownloader:0.5.0'
    implementation 'com.contrarywind:Android-PickerView:3.2.7'
    implementation 'org.apache.commons:commons-compress:1.18'
    // Google drive
    implementation 'com.google.android.gms:play-services-auth:16.0.1'
    implementation 'pub.devrel:easypermissions:0.3.0'
    implementation 'com.google.http-client:google-http-client-gson:1.26.0'
    implementation('com.google.api-client:google-api-client-android:1.26.0') {
        exclude group: 'org.apache.httpcomponents'
    }
    implementation('com.google.apis:google-api-services-drive:v3-rev136-1.25.0') {
        exclude group: 'org.apache.httpcomponents'
    }
}
